"use client";

import { useEffect, useState } from 'react';
import { AlertTriangle, Lightbulb, Wrench, ChevronDown, FileCode } from 'lucide-react';
import { Card } from '@/components/ui/card';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';
import { Button } from '@/components/ui/button';
import { Skeleton } from '@/components/ui/skeleton';
import { useToast } from "@/hooks/use-toast"
import type { UIVulnerability } from '@/ai/flows/detect-vulnerabilities';

import { explainVulnerability, type ExplainVulnerabilityOutput } from '@/ai/flows/explain-vulnerability';
import { suggestFix, type SuggestFixOutput } from '@/ai/flows/suggest-fix';

interface VulnerabilityCardProps {
  vulnerability: UIVulnerability;
}

export function VulnerabilityCard({ vulnerability }: VulnerabilityCardProps) {
  const [explanation, setExplanation] = useState<ExplainVulnerabilityOutput | null>(null);
  const [fix, setFix] = useState<SuggestFixOutput | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const { toast } = useToast();

  useEffect(() => {
    if (!isOpen) return;

    const getDetails = async () => {
      // Don't refetch if we already have the data
      if (explanation || fix) return;

      setIsLoading(true);
      try {
        const [explanationResult, fixResult] = await Promise.all([
          explainVulnerability({ codeSnippet: vulnerability.codeSnippet, vulnerabilityDescription: vulnerability.description }),
          suggestFix({ codeSnippet: vulnerability.codeSnippet, vulnerabilityDescription: vulnerability.description })
        ]);
        setExplanation(explanationResult);
        setFix(fixResult);
      } catch (error) {
        console.error('Failed to get vulnerability details:', error);
        toast({
            variant: "destructive",
            title: "Analysis Error",
            description: `Could not analyze vulnerability: ${vulnerability.type}`,
        })
      } finally {
        setIsLoading(false);
      }
    };

    getDetails();
  }, [vulnerability, toast, isOpen, explanation, fix]);

  return (
    <Card className="overflow-hidden">
      <Collapsible open={isOpen} onOpenChange={setIsOpen}>
        <CollapsibleTrigger asChild>
          <div className="flex items-center justify-between p-4 cursor-pointer hover:bg-muted/50">
            <div className="flex items-center gap-4">
              <AlertTriangle className="w-6 h-6 text-destructive" />
              <div>
                <h3 className="font-semibold text-lg">{vulnerability.type}</h3>
                <p className="text-sm text-muted-foreground">{vulnerability.file}:{vulnerability.line}</p>
              </div>
            </div>
            <Button variant="ghost" size="sm" className="w-9 p-0">
              <ChevronDown className={`h-4 w-4 transition-transform ${isOpen ? 'rotate-180' : ''}`} />
              <span className="sr-only">Toggle details</span>
            </Button>
          </div>
        </CollapsibleTrigger>
        <CollapsibleContent>
          <div className="border-t p-6 space-y-6">
            {isLoading ? (
              <div className="space-y-4">
                <Skeleton className="h-8 w-1/3" />
                <Skeleton className="h-20 w-full" />
                <Skeleton className="h-8 w-1/3" />
                <Skeleton className="h-32 w-full" />
              </div>
            ) : (
              <>
                <div>
                  <h4 className="flex items-center gap-2 font-semibold mb-2"><FileCode className="w-5 h-5" />Vulnerable Code</h4>
                   <pre className="bg-muted p-4 rounded-md font-code text-sm overflow-x-auto">
                        <code>{vulnerability.codeSnippet}</code>
                    </pre>
                </div>
                {explanation && (
                  <div>
                    <h4 className="flex items-center gap-2 font-semibold mb-2"><Lightbulb className="w-5 h-5" />Explanation</h4>
                    <div className="space-y-2 text-sm">
                        <p className="text-muted-foreground">{explanation.plainEnglishExplanation}</p>
                        <p className="text-muted-foreground"><strong className="text-foreground">Security Impact:</strong> {explanation.securityImpactSummary}</p>
                    </div>
                  </div>
                )}
                {fix && (
                  <div>
                    <h4 className="flex items-center gap-2 font-semibold mb-2"><Wrench className="w-5 h-5" />Suggested Fix</h4>
                    <p className="text-sm text-muted-foreground mb-2">{fix.explanation}</p>
                    <pre className="bg-muted p-4 rounded-md font-code text-sm overflow-x-auto">
                        <code>{fix.suggestedFix}</code>
                    </pre>
                  </div>
                )}
              </>
            )}
          </div>
        </CollapsibleContent>
      </Collapsible>
    </Card>
  );
}
