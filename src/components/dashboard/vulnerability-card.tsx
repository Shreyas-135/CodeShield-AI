"use client";

import { useEffect, useState } from 'react';
import { AlertTriangle, Lightbulb, Wrench, ChevronDown, FileCode, Sparkles, ShieldAlert, ShieldCheck, Shield } from 'lucide-react';
import { Card } from '@/components/ui/card';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';
import { Button } from '@/components/ui/button';
import { Skeleton } from '@/components/ui/skeleton';
import { useToast } from "@/hooks/use-toast"
import type { UIVulnerability } from '@/ai/flows/detect-vulnerabilities';

import { explainVulnerability, type ExplainVulnerabilityOutput } from '@/ai/flows/explain-vulnerability';
import { suggestFix, type SuggestFixOutput } from '@/ai/flows/suggest-fix';
import { Badge } from '../ui/badge';
import { Alert, AlertDescription, AlertTitle } from '../ui/alert';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Label } from '../ui/label';


interface VulnerabilityCardProps {
  vulnerability: UIVulnerability;
}

const severityMap: { [key in UIVulnerability['severity']]: { icon: React.ReactNode, color: string, name: string } } = {
    High: { icon: <ShieldAlert className="w-5 h-5" />, color: 'text-destructive', name: 'High' },
    Medium: { icon: <Shield className="w-5 h-5" />, color: 'text-yellow-500', name: 'Medium' },
    Low: { icon: <ShieldCheck className="w-5 h-5" />, color: 'text-blue-500', name: 'Low' },
}

type ExpertiseLevel = "Beginner" | "Intermediate" | "Expert";

export function VulnerabilityCard({ vulnerability }: VulnerabilityCardProps) {
  const [explanation, setExplanation] = useState<ExplainVulnerabilityOutput | null>(null);
  const [fix, setFix] = useState<SuggestFixOutput | null>(null);
  const [isExplanationLoading, setIsExplanationLoading] = useState(false);
  const [isFixLoading, setIsFixLoading] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const [expertiseLevel, setExpertiseLevel] = useState<ExpertiseLevel>("Intermediate");
  const { toast } = useToast();

  const detailsFetched = !!explanation && !!fix;
  const isLoading = isExplanationLoading || isFixLoading;

  useEffect(() => {
    if (isOpen && !detailsFetched && !isLoading) {
      getDetails();
    }
  }, [isOpen]);

  useEffect(() => {
      if (isOpen && detailsFetched) {
          getExplanation();
      }
  }, [expertiseLevel, isOpen]);


  const getExplanation = async () => {
    setIsExplanationLoading(true);
    setExplanation(null);
    try {
        const explanationResult = await explainVulnerability({ 
            codeSnippet: vulnerability.codeSnippet, 
            vulnerabilityDescription: vulnerability.description,
            expertiseLevel: expertiseLevel 
        });
        setExplanation(explanationResult);
    } catch(error) {
         console.error('Failed to get vulnerability explanation:', error);
         toast({
            variant: "destructive",
            title: "Analysis Error",
            description: `Could not get explanation for: ${vulnerability.type}`,
        })
    } finally {
        setIsExplanationLoading(false);
    }
  }

  const getFix = async () => {
    setIsFixLoading(true);
    try {
        const fixResult = await suggestFix({ 
            codeSnippet: vulnerability.codeSnippet, 
            vulnerabilityDescription: vulnerability.description 
        });
        setFix(fixResult);
    } catch (error) {
        console.error('Failed to get fix:', error);
        toast({
            variant: "destructive",
            title: "Fix Error",
            description: `Could not suggest a fix for: ${vulnerability.type}`,
        });
    } finally {
        setIsFixLoading(false);
    }
  };


  const getDetails = async () => {
      getExplanation();
      getFix();
    };


  const handleApplyFix = () => {
    if (!fix) return;
    toast({
        title: "Live Fix Applied (Simulation)",
        description: (
            <div className="mt-2 w-full">
                <p className="text-sm">The vulnerable code has been replaced with the AI-suggested fix.</p>
                <div className="mt-4 space-y-4">
                     <div>
                        <h5 className="font-semibold text-destructive">Original Code:</h5>
                        <pre className="mt-1 bg-destructive/10 p-2 rounded-md font-code text-xs overflow-x-auto text-destructive">
                            <code>{vulnerability.codeSnippet}</code>
                        </pre>
                    </div>
                     <div>
                        <h5 className="font-semibold text-green-500">Corrected Code:</h5>
                        <pre className="mt-1 bg-green-950 p-2 rounded-md font-code text-xs overflow-x-auto text-green-400">
                            <code>{fix.suggestedFix}</code>
                        </pre>
                    </div>
                </div>
            </div>
        ),
        duration: 8000,
    })
  }
  
  const severityInfo = severityMap[vulnerability.severity] || severityMap.Low;

  return (
    <Card className="overflow-hidden">
      <Collapsible open={isOpen} onOpenChange={setIsOpen}>
        <CollapsibleTrigger asChild>
          <div className="flex items-center justify-between p-4 cursor-pointer hover:bg-muted/50">
            <div className="flex items-center gap-4">
              <div className={severityInfo.color}>{severityInfo.icon}</div>
              <div>
                <h3 className="font-semibold text-lg">{vulnerability.type}</h3>
                <p className="text-sm text-muted-foreground">{vulnerability.file}:{vulnerability.line}</p>
              </div>
            </div>
            <div className="flex items-center gap-4">
                <Badge variant={vulnerability.severity === 'High' ? 'destructive' : (vulnerability.severity === 'Medium' ? 'secondary' : 'outline')} className={`border-2 ${vulnerability.severity === 'Medium' ? 'border-yellow-500/50' : ''}`}>
                    {severityInfo.name} Severity
                </Badge>
                <Button variant="ghost" size="sm" className="w-9 p-0">
                  <ChevronDown className={`h-4 w-4 transition-transform ${isOpen ? 'rotate-180' : ''}`} />
                  <span className="sr-only">Toggle details</span>
                </Button>
            </div>
          </div>
        </CollapsibleTrigger>
        <CollapsibleContent>
          <div className="border-t p-6 space-y-6">
            
            <div>
              <h4 className="flex items-center gap-2 font-semibold mb-2"><FileCode className="w-5 h-5" />Vulnerable Code</h4>
                <pre className="bg-muted p-4 rounded-md font-code text-sm overflow-x-auto">
                    <code>{vulnerability.codeSnippet}</code>
                </pre>
            </div>
            
            <div className="space-y-4">
                <div className="flex justify-between items-center">
                    <h4 className="flex items-center gap-2 font-semibold"><Lightbulb className="w-5 h-5" />Explanation</h4>
                    <div className="flex items-center gap-2">
                        <Label htmlFor={`expertise-level-${vulnerability.id}`} className="text-xs text-muted-foreground">Expertise</Label>
                        <Select value={expertiseLevel} onValueChange={(value) => setExpertiseLevel(value as ExpertiseLevel)}>
                            <SelectTrigger id={`expertise-level-${vulnerability.id}`} className="w-[150px] h-8">
                                <SelectValue placeholder="Select level" />
                            </SelectTrigger>
                            <SelectContent>
                                <SelectItem value="Beginner">Beginner</SelectItem>
                                <SelectItem value="Intermediate">Intermediate</SelectItem>
                                <SelectItem value="Expert">Expert</SelectItem>
                            </SelectContent>
                        </Select>
                    </div>
                </div>

                {isExplanationLoading ? (
                    <div className="space-y-2">
                        <Skeleton className="h-4 w-4/5" />
                        <Skeleton className="h-4 w-full" />
                        <Skeleton className="h-4 w-3/4" />
                    </div>
                ): explanation ? (
                  <div className="space-y-2 text-sm">
                      <p className="text-muted-foreground">{explanation.plainEnglishExplanation}</p>
                      <p className="text-muted-foreground"><strong className="text-foreground">Security Impact:</strong> {explanation.securityImpactSummary}</p>
                  </div>
                ) : null}
            </div>

            <div>
                <div className="flex justify-between items-center mb-2">
                    <h4 className="flex items-center gap-2 font-semibold"><Wrench className="w-5 h-5" />Suggested Fix</h4>
                    <Button size="sm" onClick={handleApplyFix} disabled={!fix || isFixLoading}><Sparkles className="w-4 h-4 mr-2" />Apply Fix</Button>
                </div>
                {isFixLoading ? (
                    <div className="space-y-2">
                        <Skeleton className="h-4 w-full" />
                         <Skeleton className="h-20 w-full" />
                    </div>
                ) : fix ? (
                    <>
                        <p className="text-sm text-muted-foreground mb-2">{fix.explanation}</p>
                        <pre className="bg-muted p-4 rounded-md font-code text-sm overflow-x-auto">
                            <code>{fix.suggestedFix}</code>
                        </pre>
                    </>
                ): null}
            </div>
            
            {!detailsFetched && isLoading && (
                 <div className="space-y-4">
                    <Skeleton className="h-8 w-1/3" />
                    <Skeleton className="h-20 w-full" />
                    <Skeleton className="h-8 w-1/3" />
                    <Skeleton className="h-32 w-full" />
                </div>
            )}
          </div>
        </CollapsibleContent>
      </Collapsible>
    </Card>
  );
}
